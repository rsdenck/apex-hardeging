#!/usr/bin/env bash
# Apex Monitoring Solutions
# Autor: ranlens.denck
# hard_app.sh
# Tuning e hardening do SO voltado para servidores exclusivamente de Middleware.
# Uso: hard_app.sh [--show|--dry-run|--apply|--revert|--help]
#
# Principais ações:
# - coleta inventário (memória, cpu, tcp, swap, cache, processos)
# - gera e aplica sysctl em /etc/sysctl.d/99-hard-app.conf
# - ajusta limits em /etc/security/limits.d/99-hard-app.conf
# - recomendações seguras e reversíveis (backup automático)
# - modo dry-run para só visualizar mudanças
# ------------------------------------------------------------------------------------
set -euo pipefail
IFS=$'\n\t'

SCRIPT_NAME="$(basename "$0")"
BACKUP_DIR="/var/backups/${SCRIPT_NAME}_$(date +%Y%m%d_%H%M%S)"
SYSCTL_FILE="/etc/sysctl.d/99-hard-app.conf"
LIMITS_FILE="/etc/security/limits.d/99-hard-app.conf"
DRY_RUN=false
APPLY=false
REVERT=false
SHOW_ONLY=false

trap 'rc=$?; if [ $rc -ne 0 ]; then echo "[ERROR] Erro no script: código $rc"; fi' EXIT

require_root() {
  if [ "$(id -u)" -ne 0 ]; then
    echo "Este script precisa ser executado como root. Use sudo." >&2
    exit 1
  fi
}

mk_backup_dir() {
  mkdir -p "$BACKUP_DIR"
  echo "Criado backup em: $BACKUP_DIR"
}

collect_inventory() {
  echo "=== INVENTÁRIO DO SISTEMA ==="
  echo "Hostname: $(hostname -f 2>/dev/null || hostname)"
  echo "Data: $(date -u +"%Y-%m-%d %H:%M:%SZ")"
  echo
  echo "-- MEMÓRIA --"
  free -h
  echo
  echo "-- CPU --"
  lscpu | sed -n '1,12p'
  echo "Núcleos lógicos: $(nproc --all)"
  echo
  echo "-- TCP / conexões --"
  ss -s
  echo
  echo "-- SWAP --"
  swapon --show || echo "Sem swap habilitado"
  echo
  echo "-- CACHE --"
  grep -E 'Cached|Buffers' /proc/meminfo || true
  echo
  echo "-- PROCESSOS (top 10 por memória) --"
  ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head -n 11
  echo "=============================="
}

calc_recommendations() {
  MEM_TOTAL_KB=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
  MEM_TOTAL_MB=$(( MEM_TOTAL_KB / 1024 ))
  CPUS=$(nproc --all)

  # Middleware servers → foco em conexões simultâneas, threads e rede
  # Swappiness → baixo, mas não 0 (apps podem tolerar um pouco de swap)
  SWAPPINESS=10

  # File descriptors: mais agressivo que DB
  FS_FILE_MAX=$(( MEM_TOTAL_MB * 200 ))
  if [ "$FS_FILE_MAX" -lt 500000 ]; then FS_FILE_MAX=500000; fi

  # Threads massivos para apps Java/.NET
  MAX_MAP_COUNT=524288

  # Rede e TCP tuning
  SOMAXCONN=65535
  NET_CORE_RMEM_DEFAULT=262144
  NET_CORE_WMEM_DEFAULT=262144
  NETDEV_BACKLOG=500000

  # Porta efêmera → aumentar
  PORT_RANGE_START=10240
  PORT_RANGE_END=65535

  # Cache pressure: menor que default
  CACHE_PRESSURE=75

  # Dirty ratios ajustados para workloads web
  DIRTY_RATIO=15
  DIRTY_BACKGROUND=5

  export MEM_TOTAL_MB CPUS SWAPPINESS FS_FILE_MAX MAX_MAP_COUNT \
         SOMAXCONN NET_CORE_RMEM_DEFAULT NET_CORE_WMEM_DEFAULT NETDEV_BACKLOG \
         PORT_RANGE_START PORT_RANGE_END CACHE_PRESSURE DIRTY_RATIO DIRTY_BACKGROUND
}

generate_sysctl_content() {
  cat <<EOF
# Generated by ${SCRIPT_NAME} for MIDDLEWARE servers
# Date: $(date -u +"%Y-%m-%d %H:%M:%SZ")
# NOTE: backups em ${BACKUP_DIR}

# VM / memória
vm.swappiness = ${SWAPPINESS}
vm.vfs_cache_pressure = ${CACHE_PRESSURE}
vm.overcommit_memory = 1

# Dirty page ratios
vm.dirty_ratio = ${DIRTY_RATIO}
vm.dirty_background_ratio = ${DIRTY_BACKGROUND}

# File handles
fs.file-max = ${FS_FILE_MAX}
vm.max_map_count = ${MAX_MAP_COUNT}

# Network tuning
net.core.somaxconn = ${SOMAXCONN}
net.core.netdev_max_backlog = ${NETDEV_BACKLOG}
net.core.rmem_default = ${NET_CORE_RMEM_DEFAULT}
net.core.wmem_default = ${NET_CORE_WMEM_DEFAULT}
net.core.rmem_max = $(( NET_CORE_RMEM_DEFAULT * 16 ))
net.core.wmem_max = $(( NET_CORE_WMEM_DEFAULT * 16 ))
net.ipv4.ip_local_port_range = ${PORT_RANGE_START} ${PORT_RANGE_END}
net.ipv4.tcp_max_syn_backlog = 65536
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_tw_reuse = 1

# TCP performance
net.ipv4.tcp_sack = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_window_scaling = 1
EOF
}

generate_limits_content() {
  cat <<EOF
# Generated by ${SCRIPT_NAME}
# Limits para processos de Middleware
* soft nofile  200000
* hard nofile  500000
* soft nproc   131072
* hard nproc   131072
* soft core 0
EOF
}

persist_sysctl_file() {
  echo "Gerando arquivo ${SYSCTL_FILE}..."
  if [ -f "${SYSCTL_FILE}" ]; then
    cp -av "${SYSCTL_FILE}" "${BACKUP_DIR}/99-hard-app.conf.bak"
  fi
  generate_sysctl_content > "${SYSCTL_FILE}.tmp"
  mv "${SYSCTL_FILE}.tmp" "${SYSCTL_FILE}"
  sysctl --system
  echo "Persistido sysctl em ${SYSCTL_FILE}"
}

persist_limits_file() {
  echo "Gerando arquivo ${LIMITS_FILE}..."
  if [ -f "${LIMITS_FILE}" ]; then
    cp -av "${LIMITS_FILE}" "${BACKUP_DIR}/99-hard-app.limits.bak"
  fi
  generate_limits_content > "${LIMITS_FILE}.tmp"
  mv "${LIMITS_FILE}.tmp" "${LIMITS_FILE}"
  echo "Persistido limits em ${LIMITS_FILE}"
}

do_apply() {
  require_root
  mk_backup_dir
  calc_recommendations
  echo "[*] Aplicando tuning para MIDDLEWARE - modo APPLY"
  persist_sysctl_file
  persist_limits_file
  echo "[*] Aplicado. Verifique logs em ${BACKUP_DIR}"
  echo "Recomendações adicionais:"
  echo "- Ajuste de GC (Java), thread pools, e maxThreads no servidor de app deve ser feito na aplicação"
  echo "- Verifique I/O scheduler (noop/mq-deadline) para NVMe"
  echo "- Considere desabilitar swap se o host tiver RAM abundante"
}

do_dry_run() {
  calc_recommendations
  echo "=== DRY RUN - conteúdo sugerido para ${SYSCTL_FILE} ==="
  generate_sysctl_content
  echo
  echo "=== DRY RUN - conteúdo sugerido para ${LIMITS_FILE} ==="
  generate_limits_content
  echo
  echo "Observações:"
  echo "- Execute 'sudo $0 --apply' para aplicar as mudanças."
}

do_show() {
  collect_inventory
  echo
  calc_recommendations
  echo
  echo "Sugestões resumidas:"
  echo "MEM_TOTAL_MB=${MEM_TOTAL_MB}, CPUS=${CPUS}"
  echo "fs.file-max=${FS_FILE_MAX}"
  echo "max_map_count=${MAX_MAP_COUNT}"
}

do_revert() {
  require_root
  echo "Restaurando backups de ${BACKUP_DIR}..."
  if [ -f "${BACKUP_DIR}/99-hard-app.conf.bak" ]; then
    cp -av "${BACKUP_DIR}/99-hard-app.conf.bak" "${SYSCTL_FILE}"
    sysctl --system
    echo "sysctl restaurado."
  fi
  if [ -f "${BACKUP_DIR}/99-hard-app.limits.bak" ]; then
    cp -av "${BACKUP_DIR}/99-hard-app.limits.bak" "${LIMITS_FILE}"
    echo "limits restaurado."
  fi
}

print_help() {
  cat <<EOF
Uso: $SCRIPT_NAME [--show|--dry-run|--apply|--revert|--help]

--show     : coleta e exibe inventário e recomendações
--dry-run  : mostra os arquivos sysctl/limits sugeridos (não aplica)
--apply    : aplica as alterações (requer root), grava backups
--revert   : reverte a partir dos backups gerados
--help     : esta ajuda
EOF
}

# --- main CLI parsing ---
if [ $# -eq 0 ]; then
  print_help
  exit 0
fi

while [ $# -gt 0 ]; do
  case "$1" in
    --show) SHOW_ONLY=true; shift ;;
    --dry-run) DRY_RUN=true; shift ;;
    --apply) APPLY=true; shift ;;
    --revert) REVERT=true; shift ;;
    --help) print_help; exit 0 ;;
    *) echo "Opção desconhecida: $1"; print_help; exit 1 ;;
  esac
done

if [ "$SHOW_ONLY" = true ]; then do_show; exit 0; fi
if [ "$DRY_RUN" = true ]; then do_dry_run; exit 0; fi
if [ "$REVERT" = true ]; then do_revert; exit 0; fi
if [ "$APPLY" = true ]; then do_apply; exit 0; fi

echo "Nenhuma ação selecionada. Use --help para ver opções."
exit 1
